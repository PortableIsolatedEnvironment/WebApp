"use client"; // Next.js requer isto para usar useState e eventos no lado do cliente.

import React, { useEffect } from "react";
import { useState } from "react";
import { Calendar } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import BackButton from "@/components/back-button";
import { Label } from "@/components/ui/label";
import { useParams } from "next/navigation";
import { courseService } from "@/api/services/courseService"
import { examService } from "@/api/services/examService"
import { sessionService } from "@/api/services/sessionService"



export default function SessionCreation() {
  const { course_id, exam_id } = useParams();
 
  useEffect(() => {
    async function fetchData() {
      try {
        const courseData = await courseService.getCoursebyID(course_id);
        const examData = await examService.getExam(course_id, exam_id);
        setCourse(courseData);
        setExam(examData);
      } catch (error) {
        console.error("Failed to fetch data:", error);
      }
    }
    if (course_id && exam_id) {
      fetchData();
    }
  }, [course_id, exam_id]);

  const [course, setCourse] = useState({});
  const [exam, setExam] = useState({});
  const [date, setDate] = useState("");
  const [room, setRoom] = useState("");
  const [duration, setDuration] = useState("");
  const [file, setFile] = useState(null);
  const [fileName, setFileName] = useState("");
  const [title, setTitle] = useState("");

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    setFile(file);
    setFileName(file.name);
  }

  const removeFile = () => {
    setFile(null);
    setFileName("");
  }

  const handleSubmit = async (e) => {
    e.preventDefault(); // Prevent default form submission
    console.log("Creating session...");
  
    if (!title || !date || !room || !duration) {
      alert("Please fill in all required fields");
      return;
    }
  
    try {

      // Format date if needed (API might expect YYYY-MM-DD)
      let formattedDate = date;
      if (date.includes("/")) {
        const [day, month, year] = date.split("/");
        formattedDate = `${year}-${month}-${day}`;
      }
  
      // Create session data object
      const sessionData = {
        name: title,
        date: formattedDate,
        room: room,
        duration: duration,
        exam_id: parseInt(exam_id),
        course_id: course_id,
        // exam file path: "/home/{course_id}/{exam_id}/{session_id}/exam_file"
        exam_file: "",
      };
  
      console.log("Sending session data:", sessionData);
      
      
      // Step 1: Create the session
      const session = await sessionService.createSession(course_id, exam_id, sessionData);
      console.log("Session created successfully:", session);
      
    // Step 2: Upload the file
    if (file) {
      try {
        // Create a FormData object
        const formData = new FormData();
        // Make sure the field name matches what your API expects
        formData.append("file", file);
        // You may need to include these additional fields depending on your API
        formData.append("session_id", session.id);
        formData.append("course_id", course_id);
        formData.append("exam_id", exam_id);

        console.log("Uploading file for session:", session.id);
        console.log("File details:", { name: file.name, type: file.type, size: file.size });
        
        // Pass the FormData object to the uploadFile method
        const uploadResult = await sessionService.uploadFile(course_id, exam_id, session.id, formData);
        console.log("File uploaded successfully:", uploadResult);
        
        // Show success message
        alert("Session created successfully with file attached!");
      } catch (uploadError) {
        console.error("File upload error:", uploadError);
        // We still created the session successfully, so show a partial success message
        alert(`Session created successfully, but file upload failed: ${uploadError.message || "Unknown error"}`);
      }
    } else {
      // No file to upload
      alert("Session created successfully!");
    }
    
    // Redirect back to exam page or session list
    window.location.href = `/course/${course_id}/${exam_id}`;
    
  } catch (error) {
    console.error("Error creating session:", error);
    alert(`Failed to create session: ${error.message || "Unknown error"}`);
  }
};

return (
  <div className="min-h-screen bg-white">
    {/* Main Content */}
    <main className="mx-auto max-w-7xl p-8">
        <h1 className="text-2xl font-semibold">Create Session for {exam.name} in {course.name} </h1>
        
      <form className="grid gap-6" onSubmit={handleSubmit} encType="multipart/form-data">
        {/* Título */}
        <div className="space-y-2">
          <label htmlFor="title" className="text-sm font-medium">
            Title
          </label>
          <Input
            id="title"
            placeholder="Session Title"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
          />
        </div>

        {/* Data, Sala e Duração */}
        <div className="grid gap-6 md:grid-cols-3">

          {/* Data */}
          <div className="space-y-2">
            <label className="text-sm font-medium">Date</label>
            <div className="relative">
              <Input
                type="text"
                placeholder="YYYY-MM-DD"
                value={date}
                onChange={(e) => setDate(e.target.value)}
              />
              <Button variant="ghost" size="icon" className="absolute right-0 top-0">
                <Calendar className="h-4 w-4" />
              </Button>
            </div>
          </div>

          {/* Sala */}
          <div className="space-y-2">
            <label className="text-sm font-medium">Room</label>
            <Input
              type="text"
              placeholder="Room Name"
              value={room}
              onChange={(e) => setRoom(e.target.value)}
            />
          </div>

          {/* Duração */}
          <div className="space-y-2">
            <label className="text-sm font-medium">Duration</label>
            <Input
              type="text"
              placeholder="02:00"
              value={duration}
              onChange={(e) => setDuration(e.target.value)}

            />
          </div>
        </div>

            {/* Attach Files Section */}
        <div className="mt-6 mb-8 border border-dashed border-gray-300 rounded-lg p-6 bg-gray-50">
          <div className="flex flex-col items-center">
            <Label htmlFor="exam_file" className="text-sm font-medium mb-3">
              Attach Files
            </Label>
            <div className="w-full max-w-md">
              {!fileName ? (
                // Show upload area when no file is selected
                <div className="flex flex-col items-center justify-center w-full">
                  <label htmlFor="exam_file" className="flex flex-col items-center justify-center w-full h-32 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-white hover:bg-gray-50 transition-colors">
                    <div className="flex flex-col items-center justify-center pt-5 pb-6">
                      <svg className="w-8 h-8 mb-3 text-gray-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 16">
                        <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2"/>
                      </svg>
                      <p className="mb-2 text-sm text-gray-500"><span className="font-semibold">Click to upload</span> or drag and drop</p>
                      <p className="text-xs text-gray-500">PDF, DOCX, or other document files</p>
                    </div>
                    <Input 
                      id="exam_file" 
                      type="file"
                      className="hidden"
                      onChange={handleFileChange}
                      required={!fileName}
                      accept=".pdf,.docx,.doc,.txt,.rar,.zip,.7z,.tar"
                    />
                  </label>
                </div>
              ) : (
                // Show file details when a file is selected
                <div className="p-4 border border-gray-200 rounded-lg bg-white">
                  <div className="flex justify-between items-center">
                    <div className="flex items-center">
                      <svg className="w-8 h-8 mr-2 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                      </svg>
                      <div>
                        <p className="font-medium text-sm">{fileName}</p>
                        <p className="text-xs text-gray-500">
                          {file && (file.size / 1024 / 1024).toFixed(2)} MB
                        </p>
                      </div>
                    </div>
                    <button 
                      type="button"
                      onClick={removeFile}
                      className="p-1 rounded-full hover:bg-gray-100"
                    >
                      <svg className="w-5 h-5 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                      </svg>
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Buttons Section */}
        <div className="mt-8 flex justify-between items-center">
          {/* Back Button */}
          <BackButton />

          {/* Create Session Button */}
          <Button 
          type="submit"
          variant="outline" 
          className="bg-white text-black border border-black hover:bg-gray-100">
            Create Session
          </Button>
        </div>
      </form>
    </main>
  </div>
  );
 }
